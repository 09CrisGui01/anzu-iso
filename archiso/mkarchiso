#!/bin/bash

CPIOCONFIG="$(pwd)/archiso-mkinitcpio.conf"
PKGLIST=""
QUIET="y"
FORCE="n"
MOUNTFILE="$(pwd)/mounts"

APPNAME=$(basename "${0}")

# usage: usage <exitvalue>
usage ()
{
    echo "usage ${APPNAME} [options] command <command options>"
    echo " general options:"
    echo "    -f               Force overwrite of working files/squashfs image/bootable image"
    echo "    -i CPIO_CONFIG   Use CONFIG file for mkinitcpio. default: ${CPIOCONFIG}"
    echo "    -p PACKAGE       Additional package to install, can be used multiple times"
    echo "    -t <iso,disk>    Type of image to create. Defaults to iso."
    echo "    -v               Enable verbose output."
    echo "    -h               This message."
    echo " commands:"
    echo " install <working dir> <pkg file> : install packages to the working dir"
    echo " squash <working dir> <sqfs name> : generate a squashfs image of the working dir"
    echo " img <working dir> <image name>   : build an image from the working dir"
    exit $1
}

while getopts 'i:P:p:a:t:fvh' arg; do
    case "${arg}" in
        i) CPIOCONFIG="${OPTARG}" ;;
        p) PKGLIST="${PKGLIST} ${OPTARG}" ;;
        t) IMG_TYPE="${OPTARG}" ;;
        f) FORCE="y" ;;
        v) QUIET="n" ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))
echo "ARGS: $@"

[ $# -le 1 ] && usage 1

# do UID checking here so someone can at least get usage instructions
if [ "$EUID" != "0" ]; then
    echo "error: This script must be run as root."
    exit 1
fi

command_name="${1}"
work_dir=""
pkgfile=""
imgname=""

case "${command_name}" in
    install) work_dir="${2}"; pkgfile="${3}"; imgname="none" ;;
    squash) work_dir="${2}"; imgname="${3}" ;;
    img) work_dir="${2}"; imgname="${3}" ;;
    *) echo "invalid command name '${command_name}'"; usage 1 ;;
esac

[ "x${imgname}" = "x" ] && (echo "Image name must be specified" && usage 1)
[ "x${work_dir}" = "x" ] && (echo "Please specify a working directory" && usage 1)

_kversion ()
{
    # Man this is gross... we need a better way to get the kernel version
    source ${work_dir}/etc/mkinitcpio.d/kernel26.kver
    echo ${ALL_kver}
}

# usage: _pacman <packages>...
_pacman ()
{
    local ret
    if [ "${QUIET}" = "y" ]; then
        mkarchroot -f ${work_dir} $* 2>&1 >/dev/null
        ret=$?
    else
        mkarchroot -f ${work_dir} $*
        ret=$?
    fi

    # Cleanup
    find "${work_dir}" -name *.pacnew -name *.pacsave -name *.pacorig -delete

    if [ $ret -ne 0 ]; then
        exit 1
    fi
}

# usage: install_pkgfile <packagesfile>
install_pkgfile ()
{
    if [ -e "${1}" ]; then
        toinstall=""
        while read pkg; do
            toinstall="${toinstall} ${pkg}"
        done < ${1}
        _pacman "${toinstall}"
    else
        echo "error: Package file '${1}' does not exist, aborting."
        exit 1
    fi
}

command_install () {
    echo "====> Installing packages to '${work_dir}'"
    if [ -e "${work_dir}" -a "${FORCE}" = "n" ]; then
        echo "error: Working dir '${work_dir}' already exists, aborting."
        exit 1
    fi

    mkdir -p "${work_dir}"

    echo "Installing packages..."
    echo " Installing packages from '${pkgfile}'"
    install_pkgfile "${pkgfile}"

    for pkg in ${PKGLIST}; do
        echo "   Installing package '${pkg}'"
        _pacman "${pkg}"
    done

    if [ -d "${work_dir}/lib/modules/" ]; then
        echo "Updating kernel module dependencies"
        kernelver=$(_kversion)
        depmod -a -b "${work_dir}" "${kernelver}"
    fi

    echo "Cleaning up what we can"
    if [ -d "${work_dir}/boot/" ]; then
        # remove the initcpio images that were generated for the host system
        find "${work_dir}/boot" -name *.img -delete
    fi

    #TODO is this needed? do it at the Makefile level?
    if [ -d "${work_dir}/home/" ]; then
        echo "Creating default home directory"
        install -d -o1000 -g100 -m0755 "${work_dir}/home/arch"
    fi

    # delete a lot of unnecessary cache/log files
    kill_dirs="var/abs var/cache/man var/cache/pacman var/log/* var/mail tmp/* initrd"
    for x in ${kill_dirs}; do
        if [ -e "${work_dir}/${x}" ]; then
            rm -rf "${work_dir}/${x}"
        fi
    done

    # pacman DBs are big, delete all sync dbs
    rm -rf "${work_dir}/var/lib/pacman/sync"

    #TODO test for existance
    cp "${MOUNTFILE}" "${work_dir}/mounts"

    # always make an addon out of DEF_CONFIG_DIR
    #echo "Creating default overlay..."
    #if [ "${QUIET}" = "y" ]; then
    #    mksquashfs "${DEF_CONFIG_DIR}" "${work_dir}/addons/overlay.sqfs" -noappend >/dev/null
    #else
    #    mksquashfs "${DEF_CONFIG_DIR}" "${work_dir}/addons/overlay.sqfs" -noappend
    #fi
}

# command_squash path image
command_squash () {
    echo "====> Generating SquashFS image ${imgname}"
    if [ -e "${imgname}" ]; then
        if [ "${FORCE}" = "y" ]; then
            echo -n "Removing old SquashFS image..."
            rm "${imgname}"
            echo "done."
        else
            echo "error: SquashFS image '${imgname}' already exists, aborting."
            exit 1
        fi
    fi

    echo "Creating SquashFS image. This may take some time..."
    start=$(date +%s)
    if [ "${QUIET}" = "y" ]; then
        mksquashfs "${work_dir}" "${imgname}" -noappend >/dev/null
    else
        mksquashfs "${work_dir}" "${imgname}" -noappend
    fi
    minutes=$(echo $start $(date +%s) | awk '{ printf "%0.2f",($2-$1)/60 }')
    echo "Image creation done in $minutes minutes."
}

command_img () {
    echo "====> Making bootable image"
    if [ -e "${imgname}" ]; then
        if [ "${FORCE}" = "y" ]; then
            echo "Removing existing bootable image..."
            rm -rf "${imgname}"
        else
            echo "error: Image '${imgname}' already exists, aborting."
            exit 1
        fi
    fi
    if [ ! -e "${CPIOCONFIG}" ]; then
        echo "error: mkinitcpio config '${CPIOCONFIG}' does not exist, aborting."
        exit 1
    fi

    kernelver=$(_kversion)
    basedir=${work_dir}
    [ "${work_dir:0:1}" != "/" ] && basedir="$(pwd)/${work_dir}"
    echo "Generating initcpio for image..."
    if [ "${QUIET}" = "y" ]; then
        mkinitcpio -c "${CPIOCONFIG}" -b "${basedir}" -k "${kernelver}" -g "${work_dir}/boot/archiso.img" >/dev/null
        ret=$?
    else
        mkinitcpio -c "${CPIOCONFIG}" -b "${basedir}" -k "${kernelver}" -g "${work_dir}/boot/archiso.img"
        ret=$?
    fi
    if [ $ret -ne 0 ]; then
        echo "error: initcpio image creation failed..."
        exit 1
    fi

    USE_GRUB=1
    bootflags=""
    if [ "$USE_GRUB" = "1" ]; then
        _pacman grub #grub-gfx ??
        mkdir -p "${work_dir}/boot/grub"
        cp "${work_dir}/usr/lib/grub/i386-pc/*" "${work_dir}/boot/grub"

        # copy over kernel and grub configs for boot
        if [ -d "${work_dir}/boot" -a -e "${DEF_CONFIG_DIR}/boot" ]; then
            rm -rf "${work_dir}/boot"
            cp -r "${work_dir}/boot" "${work_dir}"
            cp -rf "${DEF_CONFIG_DIR}/boot" "${work_dir}"
        fi
        bootflags="boot/grub/stage2_eltorito"
    else
        _pacman isolinux
        bootflags="boot/whatever/isolinux"
    fi

    if [ "x$IMG_TYPE" == "xdisk" ]; then
        echo "Creating DISK image..."
        mkusbimg "${work_dir}" "${imgname}"
    else
        echo "Creating ISO image..."
        if [ -z "$bootflags" ]; then
            echo "Eeek, no boot flags found. This probably won't be bootable"
        fi
        qflag=""
        [ "${QUIET}" = "y" ] && qflag="-q"
        mkisofs ${qflag} -r -l $bootflags -uid 0 -gid 0 \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -publisher "Arch Linux <archlinux.org>" \
            -input-charset=UTF-8 -p "prepared by mkarchiso" \
            -A "Arch Linux Live/Rescue CD" \
            -o "${imgname}" "${work_dir}"
    fi
}

# Go through the main commands in order. If 'all' was specified, then we want
# to do everything. Start with 'install'.
if [ "${command_name}" = "install" -o "${command_name}" = "all" ]; then
    command_install
fi
if [ "${command_name}" = "squash" -o "${command_name}" = "all" ]; then
    command_squash
fi
if [ "${command_name}" = "img" -o "${command_name}" = "all" ]; then
    command_img
fi

# vim:ts=4:sw=4:et:
